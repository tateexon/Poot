#version 450

layout(local_size_x = 16, local_size_y = 16) in;

// Coordinates passed as uniform
layout(set = 0, binding = 0) uniform UBO {
    vec2 coordinates;
    float seed;
} ubo;

// Output heightmap buffer
layout(set = 0, binding = 1) buffer Heightmap {
    float data[];
} heightmap;



// Improved hash function using bitwise operations
float hash(vec2 p, float seed) {
    // Incorporate seed into position
    p += seed;
    vec3 p3 = fract(vec3(p.xyx) * 0.1031);
    p3 += dot(p3, p3.yzx + 33.33);
    return fract((p3.x + p3.y) * p3.z);
}

vec2 gradient(vec2 p, float seed) {
    float h = hash(p, seed) * 4.0; // Four possible gradients
    float angle = h * 1.57079632679; // h * (PI/2)
    return vec2(cos(angle), sin(angle));
}

// Update Perlin2D to accept seed
float Perlin2D(vec2 P, float seed) {
    // Grid cell coordinates
    vec2 Pi = floor(P);
    // Local coordinates within cell
    vec2 Pf = fract(P);

    // Get gradients at cell corners with seed
    vec2 g00 = gradient(Pi, seed);
    vec2 g10 = gradient(Pi + vec2(1.0, 0.0), seed);
    vec2 g01 = gradient(Pi + vec2(0.0, 1.0), seed);
    vec2 g11 = gradient(Pi + vec2(1.0, 1.0), seed);

    // Compute the dot product between gradient vectors and distance vectors
    float n00 = dot(g00, Pf - vec2(0.0, 0.0));
    float n10 = dot(g10, Pf - vec2(1.0, 0.0));
    float n01 = dot(g01, Pf - vec2(0.0, 1.0));
    float n11 = dot(g11, Pf - vec2(1.0, 1.0));

    // Smooth interpolation using the fade function
    vec2 fade_xy = Pf * Pf * Pf * (Pf * (Pf * 6.0 - 15.0) + 10.0);

    // Interpolate along x
    float nx0 = mix(n00, n10, fade_xy.x);
    float nx1 = mix(n01, n11, fade_xy.x);

    // Interpolate along y
    float nxy = mix(nx0, nx1, fade_xy.y);

    return nxy;
}

void main() {
    int width = 1024;
    uvec2 id = gl_GlobalInvocationID.xy;

    // Compute the global position
    vec2 globalPos = vec2(id) + ubo.coordinates;

    // Apply a scaling factor
    float scale = 0.02; // Adjust this value to control noise frequency
    vec2 uv = globalPos * scale;


    // Compute Perlin noise or other function using uv
    float value = Perlin2D(uv, ubo.seed);

    heightmap.data[(id.y * width) + id.x] = value;
}
